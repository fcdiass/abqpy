:py:mod:`abqpy.config`
======================

.. py:module:: abqpy.config


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   abqpy.config.AbaqusCAEConfig
   abqpy.config.AbaqusPythonConfig
   abqpy.config.AbaqusConfig
   abqpy.config.AbaqusCommandOptions




Attributes
~~~~~~~~~~

.. autoapisummary::

   abqpy.config.defaults
   abqpy.config.options
   abqpy.config.trues
   abqpy.config.config


.. py:class:: AbaqusCAEConfig(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.4/concepts/models/

   A base class for creating Pydantic models.

   .. attribute:: __class_vars__

      The names of classvars defined on the model.

   .. attribute:: __private_attributes__

      Metadata about the private attributes of the model.

   .. attribute:: __signature__

      The signature for instantiating the model.

   .. attribute:: __pydantic_complete__

      Whether model building is completed, or if there are still undefined fields.

   .. attribute:: __pydantic_core_schema__

      The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.

   .. attribute:: __pydantic_custom_init__

      Whether the model has a custom `__init__` function.

   .. attribute:: __pydantic_decorators__

      Metadata containing the decorators defined on the model.
      This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.

   .. attribute:: __pydantic_generic_metadata__

      Metadata for generic models; contains data used for a similar purpose to
      __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.

   .. attribute:: __pydantic_parent_namespace__

      Parent namespace of the model, used for automatic rebuilding of models.

   .. attribute:: __pydantic_post_init__

      The name of the post-init method for the model, if defined.

   .. attribute:: __pydantic_root_model__

      Whether the model is a `RootModel`.

   .. attribute:: __pydantic_serializer__

      The pydantic-core SchemaSerializer used to dump instances of the model.

   .. attribute:: __pydantic_validator__

      The pydantic-core SchemaValidator used to validate instances of the model.

   .. attribute:: __pydantic_extra__

      An instance attribute with the values of extra fields from validation when
      `model_config['extra'] == 'allow'`.

   .. attribute:: __pydantic_fields_set__

      An instance attribute with the names of fields explicitly specified during validation.

   .. attribute:: __pydantic_private__

      Instance attribute with the values of private attributes set on the model instance.


   .. autoclasstoc::

   .. py:attribute:: database
      :type: Optional[str]

      

   .. py:attribute:: replay
      :type: Optional[str]

      

   .. py:attribute:: recover
      :type: Optional[str]

      

   .. py:attribute:: gui
      :type: bool
      :value: False

      

   .. py:attribute:: envstartup
      :type: bool
      :value: True

      

   .. py:attribute:: savedOptions
      :type: bool
      :value: True

      

   .. py:attribute:: savedGuiPrefs
      :type: bool
      :value: True

      

   .. py:attribute:: startupDialog
      :type: bool
      :value: True

      

   .. py:attribute:: custom
      :type: Optional[str]

      

   .. py:attribute:: guiTester
      :type: Optional[str]

      

   .. py:attribute:: guiRecord
      :type: Optional[bool]

      


.. py:class:: AbaqusPythonConfig(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.4/concepts/models/

   A base class for creating Pydantic models.

   .. attribute:: __class_vars__

      The names of classvars defined on the model.

   .. attribute:: __private_attributes__

      Metadata about the private attributes of the model.

   .. attribute:: __signature__

      The signature for instantiating the model.

   .. attribute:: __pydantic_complete__

      Whether model building is completed, or if there are still undefined fields.

   .. attribute:: __pydantic_core_schema__

      The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.

   .. attribute:: __pydantic_custom_init__

      Whether the model has a custom `__init__` function.

   .. attribute:: __pydantic_decorators__

      Metadata containing the decorators defined on the model.
      This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.

   .. attribute:: __pydantic_generic_metadata__

      Metadata for generic models; contains data used for a similar purpose to
      __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.

   .. attribute:: __pydantic_parent_namespace__

      Parent namespace of the model, used for automatic rebuilding of models.

   .. attribute:: __pydantic_post_init__

      The name of the post-init method for the model, if defined.

   .. attribute:: __pydantic_root_model__

      Whether the model is a `RootModel`.

   .. attribute:: __pydantic_serializer__

      The pydantic-core SchemaSerializer used to dump instances of the model.

   .. attribute:: __pydantic_validator__

      The pydantic-core SchemaValidator used to validate instances of the model.

   .. attribute:: __pydantic_extra__

      An instance attribute with the values of extra fields from validation when
      `model_config['extra'] == 'allow'`.

   .. attribute:: __pydantic_fields_set__

      An instance attribute with the names of fields explicitly specified during validation.

   .. attribute:: __pydantic_private__

      Instance attribute with the values of private attributes set on the model instance.


   .. autoclasstoc::

   .. py:attribute:: sim
      :type: Optional[str]

      

   .. py:attribute:: log
      :type: Optional[str]

      


.. py:class:: AbaqusConfig(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`

   Usage docs: https://docs.pydantic.dev/2.4/concepts/models/

   A base class for creating Pydantic models.

   .. attribute:: __class_vars__

      The names of classvars defined on the model.

   .. attribute:: __private_attributes__

      Metadata about the private attributes of the model.

   .. attribute:: __signature__

      The signature for instantiating the model.

   .. attribute:: __pydantic_complete__

      Whether model building is completed, or if there are still undefined fields.

   .. attribute:: __pydantic_core_schema__

      The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.

   .. attribute:: __pydantic_custom_init__

      Whether the model has a custom `__init__` function.

   .. attribute:: __pydantic_decorators__

      Metadata containing the decorators defined on the model.
      This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.

   .. attribute:: __pydantic_generic_metadata__

      Metadata for generic models; contains data used for a similar purpose to
      __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.

   .. attribute:: __pydantic_parent_namespace__

      Parent namespace of the model, used for automatic rebuilding of models.

   .. attribute:: __pydantic_post_init__

      The name of the post-init method for the model, if defined.

   .. attribute:: __pydantic_root_model__

      Whether the model is a `RootModel`.

   .. attribute:: __pydantic_serializer__

      The pydantic-core SchemaSerializer used to dump instances of the model.

   .. attribute:: __pydantic_validator__

      The pydantic-core SchemaValidator used to validate instances of the model.

   .. attribute:: __pydantic_extra__

      An instance attribute with the values of extra fields from validation when
      `model_config['extra'] == 'allow'`.

   .. attribute:: __pydantic_fields_set__

      An instance attribute with the names of fields explicitly specified during validation.

   .. attribute:: __pydantic_private__

      Instance attribute with the values of private attributes set on the model instance.


   .. autoclasstoc::

   .. py:attribute:: cae
      :type: AbaqusCAEConfig

      

   .. py:attribute:: python
      :type: AbaqusPythonConfig

      

   .. py:attribute:: debug
      :type: bool
      :value: False

      

   .. py:attribute:: skip_abaqus
      :type: bool
      :value: False

      

   .. py:attribute:: make_docs
      :type: bool
      :value: False

      

   .. py:attribute:: cli_traceback_limit
      :type: int
      :value: 0

      


.. py:class:: AbaqusCommandOptions(**data: Any)

   Bases: :py:obj:`AbaqusCAEConfig`, :py:obj:`AbaqusPythonConfig`

   Usage docs: https://docs.pydantic.dev/2.4/concepts/models/

   A base class for creating Pydantic models.

   .. attribute:: __class_vars__

      The names of classvars defined on the model.

   .. attribute:: __private_attributes__

      Metadata about the private attributes of the model.

   .. attribute:: __signature__

      The signature for instantiating the model.

   .. attribute:: __pydantic_complete__

      Whether model building is completed, or if there are still undefined fields.

   .. attribute:: __pydantic_core_schema__

      The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.

   .. attribute:: __pydantic_custom_init__

      Whether the model has a custom `__init__` function.

   .. attribute:: __pydantic_decorators__

      Metadata containing the decorators defined on the model.
      This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.

   .. attribute:: __pydantic_generic_metadata__

      Metadata for generic models; contains data used for a similar purpose to
      __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.

   .. attribute:: __pydantic_parent_namespace__

      Parent namespace of the model, used for automatic rebuilding of models.

   .. attribute:: __pydantic_post_init__

      The name of the post-init method for the model, if defined.

   .. attribute:: __pydantic_root_model__

      Whether the model is a `RootModel`.

   .. attribute:: __pydantic_serializer__

      The pydantic-core SchemaSerializer used to dump instances of the model.

   .. attribute:: __pydantic_validator__

      The pydantic-core SchemaValidator used to validate instances of the model.

   .. attribute:: __pydantic_extra__

      An instance attribute with the values of extra fields from validation when
      `model_config['extra'] == 'allow'`.

   .. attribute:: __pydantic_fields_set__

      An instance attribute with the names of fields explicitly specified during validation.

   .. attribute:: __pydantic_private__

      Instance attribute with the values of private attributes set on the model instance.


   .. autoclasstoc::


.. py:data:: defaults

   

.. py:data:: options

   

.. py:data:: trues
   :value: ['true', '1', 'on', 'yes']

   

.. py:data:: config

   

